

----STARTUP---- (1 December 2019 20:09:32) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


----End fileIn of /Users/asdolo/Downloads/macos64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/Features/Compression.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/Features/Sound.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/Features/WebClient.pck.st----!

----End fileIn of /Users/asdolo/Downloads/substrings-finder-6000 zip/server-services/StringServer-cors.st----!

listeningPort := 8080.
killServer := [ :server |
	server stopListening.
	server destroy.
].
!

StringServerController allInstances!

StringServerController allInstances!

server := StringServerController listeningOn: listeningPort. 
!

StringServerController allInstances.!

StringServerController allInstancesDo: killServer.
!

StringServerController allInstances.!

killServer value: server.
!

killServer value: server.
!

server!

server := StringServerController listeningOn: listeningPort. 
!

killServer value: server.
!
!StringServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:19:47' prior: 50815516!
initializeWith: aPortNumber

	hiList := self hiList.
	
	stringGenius := StringGenius new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		self halt.
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !

killServer value: server.
!

server := StringServerController listeningOn: listeningPort. 
!

request!

killServer value: server.
!

killServer value: server.
!
!StringServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:22:52' prior: 50815661!
initializeWith: aPortNumber

	hiList := self hiList.
	
	stringGenius := StringGenius new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		[sentence := (request fields at:'sentence').
			self halt.
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !

server := StringServerController listeningOn: listeningPort. 
!

sentence!

killServer value: server.
!
!StringServerController methodsFor: 'initialization' stamp: 'F 11/14/2019 15:26:29' prior: 50815754!
initializeWith: aPortNumber

	hiList := self hiList.
	
	stringGenius := StringGenius new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !

killServer value: server.
!

----End fileIn of /Users/asdolo/Desktop/Ingsoft1/25-TusLibros/3/TusLibros.st----!

Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port tusLibros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosServerController category: #'TusLibros-Server' stamp: 'LR 12/1/2019 20:32:50'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port tusLibros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

killServer value: server.!
!TusLibrosServerController class methodsFor: 'instance creation' stamp: 'LR 12/1/2019 20:34:04'!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber.! !

Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosServerController category: #'TusLibros-Server' stamp: 'LR 12/1/2019 20:36:32'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:36:59'!
initializeWith: aPortNumber

	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.! !
!TusLibrosServerController methodsFor: 'accesing' stamp: 'LR 12/1/2019 20:37:49'!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^port ifNil: [port:=8080].
	
	! !
!TusLibrosServerController methodsFor: 'accesing' stamp: 'LR 12/1/2019 20:37:51' prior: 50817636!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^port ifNil: [port:=8080].! !
!TusLibrosServerController methodsFor: 'enabling services' stamp: 'LR 12/1/2019 20:38:02'!
destroy
	
	webServer ifNotNil:[webServer destroy].! !
!TusLibrosServerController methodsFor: 'enabling services' stamp: 'LR 12/1/2019 20:38:17'!
startListening
	
	webServer startListener.

	^ 'Listening on port: ', self port asString.! !
!TusLibrosServerController methodsFor: 'enabling services' stamp: 'LR 12/1/2019 20:38:29'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', self port asString.! !

----SNAPSHOT----(1 December 2019 20:40:45) CuisUniversity-3938.image priorSource: 14319118!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:45:51' prior: 50817630!
initializeWith: aPortNumber

	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self usersAndPasswords
		acceptingItemsOf: self catalog
		registeringOn: self salesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: self clock
! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:45:59' prior: 50817678!
initializeWith: aPortNumber

	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self usersAndPasswords
		acceptingItemsOf: self catalog
		registeringOn: self salesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: self clock.! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:47:36'!
usersAndPasswords

	^Dictionary new
		at: 'user1' put: 'password1';
		yourself! !

----SNAPSHOT----(1 December 2019 20:48:00) CuisUniversity-3938.image priorSource: 15552644!

TusLibrosSystemFacade
		authenticatingWith: self usersAndPasswords
		acceptingItemsOf: self catalog
		registeringOn: self salesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: self clock.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:51:24' prior: 50817692!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		
		
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:51:36' prior: 50817721!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
	] on: Error do: [ :anError |
		self halt.
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

TusLibrosServerController allInstances.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 20:52:04' prior: 50817739!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:26'!
catalog
	self shouldBeImplemented.! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:39' prior: 50817780!
catalog
	
	! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:46'!
salesBook
	self shouldBeImplemented.! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:48' prior: 50817788!
salesBook
	! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:54'!
merchantProcessor
	self shouldBeImplemented.! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:52:57' prior: 50817796!
merchantProcessor
	
	! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:53:03'!
clock
	self shouldBeImplemented.! !
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:53:06' prior: 50817805!
clock
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.
!
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 20:54:37' prior: 50817705!
usersAndPasswords

	^ Dictionary new
		at: 'user1' put: 'password1';
		yourself! !

8,74!

8.74!

8.74!
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 21:12:00' prior: 50817785!
catalog
	
	^ Dictionary new
		at: '978-0439708180' put: 8.74;
		at: '978-1338299151' put: 6.99;
		at: '978-0439136365' put: 5.76;
		at: '978-0439139601' put: 7.79;
		at: '978-0439358071' put: 7.79;
		at: '978-0439785969' put: 7.79;
		at: '978-0545139700' put: 10.49;
		yourself ! !

10.49!
!TusLibrosServerController methodsFor: 'data' stamp: 'LR 12/1/2019 21:14:09' prior: 50817793!
salesBook
	
	^ OrderedCollection new! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 21:14:42'!
initialUsersAndPasswords

	^ Dictionary new
		at: 'user1' put: 'password1';
		yourself! !
!TusLibrosServerController methodsFor: 'as yet unclassified' stamp: 'LR 12/1/2019 21:14:42' prior: 50817761!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self initialUsersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

!methodRemoval: TusLibrosServerController #usersAndPasswords stamp: 'LR 12/1/2019 21:14:42'!
usersAndPasswords

	^ Dictionary new
		at: 'user1' put: 'password1';
		yourself!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 21:14:56'!
usersAndPasswords

	^ Dictionary new
		at: 'user1' put: 'password1';
		yourself! !
!TusLibrosServerController methodsFor: 'as yet unclassified' stamp: 'LR 12/1/2019 21:14:56' prior: 50817848!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

!methodRemoval: TusLibrosServerController #initialUsersAndPasswords stamp: 'LR 12/1/2019 21:14:56'!
initialUsersAndPasswords

	^ Dictionary new
		at: 'user1' put: 'password1';
		yourself!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 21:20:19' prior: 50817801!
merchantProcessor
	
	^ self! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/1/2019 21:20:24'!
debit: anAmount from: aCreditCard
! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/4/2019 19:20:22' prior: 50817877!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/sayHi' action:[:request |	
		
			"request send200Response: (self sayRandomHi)"
			request send200Response: (self sayRandomHi asUtf8) 
					 contentType: 'application/json; charset=utf-8' do: [:resp | 
						resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'LR 12/4/2019 19:21:15' prior: 50817910!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/sayHi' action:[:request |	
		
			"request send200Response: (self sayRandomHi)"
			request send200Response: 'hola' 
					 contentType: 'application/json; charset=utf-8' do: [:resp | 
						resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

----SNAPSHOT----(4 December 2019 19:22:02) CuisUniversity-3938.image priorSource: 15553905!

killServer value: server.
!

----QUIT----(4 December 2019 19:22:21) CuisUniversity-3938.image priorSource: 15562226!

----STARTUP---- (4 December 2019 19:33:13) as /Users/personal/Desktop/macos64/CuisUniversity-3938.image!

!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:34:15' prior: 50817942!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request |	
		
			"request send200Response: (self sayRandomHi)"
			request send200Response: 'hola' 
					 contentType: 'application/json; charset=utf-8' do: [:resp | 
						resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:37:25' prior: 50817981!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:40:11' prior: 50818007!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:42:30' prior: 50818041!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

listeningPort := 8080.!

listeningPort := 8080.
killServer := [ :server |
	server stopListening.
	server destroy.
].!

listeningPort := 8080.
killServer := [ :server |
	server stopListening.
	server destroy.
].!

listeningPort := 8080.
killServer := [ :server |
	server stopListening.
	server destroy.
].!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:47:00' prior: 50818078!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		systemFacade createCartFor:clientID  authenticatedWith: password.
		systemFacade listCartIdentifiedAs: clientID.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:52:12' prior: 50818128!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:53:08' prior: 50818168!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |
		self halt.
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !

(self does: aUser authenticatesWith: aPassword)!

aBlock!
!TusLibrosSystemFacade methodsFor: 'authentication' stamp: 'FA 12/4/2019 19:57:13' prior: 50816567!
if: aUser authenticatesWith: aPassword do: aBlock

	^ (self does: aUser authenticatesWith: aPassword)
		ifTrue: aBlock value
		ifFalse: [ self signalInvalidUserAndOrPassword ].
	! !
!TusLibrosSystemFacade methodsFor: 'authentication' stamp: 'FA 12/4/2019 19:58:07' prior: 50818253!
if: aUser authenticatesWith: aPassword do: aBlock

	^ (self does: aUser authenticatesWith: aPassword)
		ifTrue: aBlock
		ifFalse: [ self signalInvalidUserAndOrPassword ].
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 19:58:24' prior: 50818210!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |
		self halt.
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !

(self does: aUser authenticatesWith: aPassword)!

(self does: aUser authenticatesWith: aPassword)!

trueAlternativeBlock value!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:05:59' prior: 50817810!
clock
	^ Clock new.! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:07:04' prior: 50818317!
clock
	^ Clock initializedInstance.! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !

cartId := self generateCartId.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:09:07' prior: 50818271!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | res |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		res:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (res).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'FA 12/4/2019 20:09:21' prior: 50816638!
createCartFor: aUser authenticatedWith: aPassword

	^ self if: aUser authenticatesWith: aPassword do: [ | cartId cartSession |

		cartId := self generateCartId.
		self halt.
		cartSession := CartSession ownedBy: aUser with: (Cart acceptingItemsOf: catalog) on: self..
		cartSessions at: cartId put: cartSession.

		cartId  ]! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

self now!

(Clock new) now.!

(Time new) now.!

(Clock) now.!

Clock newFrom: Time now.!

self now.!

self now.!

 DateAndTime now!

(DateAndTime new) now!

(DateAndTime ) today!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:14:40' prior: 50818324!
clock
	^ DateAndTime.! !

listeningPort := 8080.
killServer := [ :server |
    server stopListening.
    server destroy.
].!

server := TusLibrosServerController listeningOn: listeningPort. !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !

systemFacade now!

killServer value: server.!

killServer value: server.!

TusLibrosServerController allInstancesDo: killServer.!

server := TusLibrosServerController listeningOn: listeningPort. !

 self now!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:20:01' prior: 50818333!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (cartID).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

WebUtils jsonEncode: 1.!

WebUtils jsonEncode: (Dictionary newFromPairs: {
		"Consumer key and secret"
		'oauth_consumer_key'. 		'abcd'.
		'oauth_consumer_secret'.	'efgh'.

		"Token key and secret"
		'oauth_token'.	'ijkl'.
		'oauth_token_secret'. 'mnop'.
		
		'oauth_timestamp'. '1281668113'.
		'oauth_nonce'.	'FWNkVaRJVzE'.
		
		"Twitter uses oauth 1.0 with HMAC-SHA1"
		'oauth_version'.				'1.0'.
		'oauth_signature_method'.	'HMAC-SHA1'.
	}) .

!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:22:45' prior: 50818413!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				"Consumer key and secret"
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:23:35' prior: 50818466!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				"Consumer key and secret"
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:29:28' prior: 50818508!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				"Consumer key and secret"
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						"Consumer key and secret"
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson asUtf8).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:29:33' prior: 50818550!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				"Consumer key and secret"
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson asUtf8).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:29:46' prior: 50818602!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson asUtf8).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:31:08' prior: 50818653!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:31:32' prior: 50818706!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		self halt.
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				self halt.
				request send404Response:(substringsAsJson).
				^self.
				].
			self halt.
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'FA 12/4/2019 20:32:57' prior: 50818371!
createCartFor: aUser authenticatedWith: aPassword

	^ self if: aUser authenticatesWith: aPassword do: [ | cartId cartSession |

		cartId := self generateCartId.
		cartSession := CartSession ownedBy: aUser with: (Cart acceptingItemsOf: catalog) on: self..
		cartSessions at: cartId put: cartSession.

		cartId  ]! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:34:01' prior: 50818756!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		self halt.
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:34:46' prior: 50818823!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientid').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:42:30' prior: 50818875!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:47:12' prior: 50818926!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:51:45' prior: 50818980!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send404Response:(substringsAsJson).
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:54:26' prior: 50819034!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send404Response: (anError messageText) ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 20:54:52' prior: 50819083!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] ]].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.!

----SNAPSHOT----(4 December 2019 21:01:38) CuisUniversity-3938.image priorSource: 15562348!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:11:38' prior: 50817528!
itemSellByTheStorePrice

	^Dictionary newFromPairs: {
						'price'. 		10.
						'msg'.	self itemSellByTheStoreTitle.
					}! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:12:08'!
itemSellByTheStoreTitle
	^'title 1'.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:12:47'!
itemSellByTheStoreMetadata

	^Dictionary newFromPairs: {
						'price'. 		10.
						'msg'.	self itemSellByTheStoreTitle.
					}! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:12:47' prior: 50816878!
test02CalculatedTotalIsCorrect

	| cart cashier |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.

	cashier :=  Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: OrderedCollection new.

	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStoreMetadata * 2)! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:12:47' prior: 50817257!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStoreMetadata.
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:12:47' prior: 50817086!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (testObjectsFactory itemSellByTheStoreMetadata * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStorePrice.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:12:47' prior: 50817537!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStoreMetadata;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!methodRemoval: StoreTestObjectsFactory #itemSellByTheStorePrice stamp: 'FA 12/4/2019 21:12:47'!
itemSellByTheStorePrice

	^Dictionary newFromPairs: {
						'price'. 		10.
						'msg'.	self itemSellByTheStoreTitle.
					}!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:13:19' prior: 50817515!
anotherItemSellByTheStorePrice

	^Dictionary newFromPairs: {
						'price'. 		15.
						'msg'.	self anotherItemSellByTheStoreTitle.
					}! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:13:32'!
anotherItemSellByTheStoreTitle
	^'title 2'.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 12/4/2019 21:13:52'!
anotherItemSellByTheStoreMetadata

	^Dictionary newFromPairs: {
						'price'. 		15.
						'msg'.	self anotherItemSellByTheStoreTitle.
					}! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:13:53' prior: 50819259!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (testObjectsFactory itemSellByTheStoreMetadata * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStoreMetadata.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FA 12/4/2019 21:13:53' prior: 50819288!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStoreMetadata;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStoreMetadata;
		yourself ! !

!methodRemoval: StoreTestObjectsFactory #anotherItemSellByTheStorePrice stamp: 'FA 12/4/2019 21:13:53'!
anotherItemSellByTheStorePrice

	^Dictionary newFromPairs: {
						'price'. 		15.
						'msg'.	self anotherItemSellByTheStoreTitle.
					}!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:13:59'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:13:59'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:13:59'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:13:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:13:59'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:13:59'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:14:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:14:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:14:02'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:14:30'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:14:30'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:14:30'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:14:30'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:14:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:14:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:14:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:14:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:14:32'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'FA 12/4/2019 21:15:11' prior: 50816193!
totalOf: anItem quantity: aQuantity

	^((cart catalog at: anItem) at:'price') * aQuantity  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:15:21'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:15:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:15:21'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:15:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:15:24'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FA 12/4/2019 21:15:52' prior: 50819217!
test02CalculatedTotalIsCorrect

	| cart cashier |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.

	cashier :=  Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: OrderedCollection new.

	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStoreMetadata at:'price' * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:15:54'!
ERROR!

testObjectsFactory itemSellByTheStoreMetadata at:'price'!

testObjectsFactory itemSellByTheStoreMetadata at:'price' * 2!
!CashierTest methodsFor: 'tests' stamp: 'FA 12/4/2019 21:16:15' prior: 50819732!
test02CalculatedTotalIsCorrect

	| cart cashier |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.

	cashier :=  Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: OrderedCollection new.

	self assert: cashier checkOut total = ((testObjectsFactory itemSellByTheStoreMetadata at:'price') * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:16:17'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'FA 12/4/2019 21:16:44' prior: 50819235!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: ((testObjectsFactory itemSellByTheStoreMetadata) at:'price').
! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:16:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:16:47'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:17:15'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:17:15'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'FA 12/4/2019 21:17:36' prior: 50819324!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: ((testObjectsFactory itemSellByTheStoreMetadata)at:'price' * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStoreMetadata.! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:17:38'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:17:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:17:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:17:42'!
ERROR!

(testObjectsFactory itemSellByTheStoreMetadata)at:'price'!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'FA 12/4/2019 21:18:01' prior: 50819930!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (((testObjectsFactory itemSellByTheStoreMetadata)at:'price') * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStoreMetadata.! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:18:03'!
FAILURE!

((testObjectsFactory itemSellByTheStoreMetadata)at:'price')!

((testObjectsFactory itemSellByTheStoreMetadata)at:'price')!

(purchases at: self validBook) !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:20:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:20:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:11'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:11'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'FA 12/4/2019 21:20:45' prior: 50820084!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (((testObjectsFactory itemSellByTheStoreMetadata)at:'price') * 2).
	self assert: (purchases at: self anotherValidBook) equals: (testObjectsFactory anotherItemSellByTheStoreMetadata at:'price').! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:48'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:20:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:20:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:21:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:21:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:21:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:21:10'!
PASSED!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 21:28:38'!
createDictionaryWith:aPrice and:aTitle
	
	^ Dictionary newFromPairs:{
		'price'.aPrice.
		'title'.aTitle.
	};
	yourself! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 21:30:19' prior: 50817825!
catalog
	
	^ Dictionary new
		at: '978-0439708180' put: (self createDictionaryWith:8.74  and:'title 1');
		at: '978-1338299151' put: (self createDictionaryWith:6.99  and:'title 2');
		at: '978-0439136365' put: (self createDictionaryWith:5.76  and:'title 3');
		at: '978-0439139601' put: (self createDictionaryWith:7.79  and:'title 4');
		at: '978-0439358071' put:(self createDictionaryWith:7.79  and:'title 5');
		at: '978-0439785969' put: (self createDictionaryWith:7.79  and:'title 6');
		at: '978-0545139700' put: (self createDictionaryWith:10.49  and:'title 7');
		yourself ! !

killServer value: server.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 21:30:34'!
PASSED!

----SNAPSHOT----(4 December 2019 21:32:29) CuisUniversity-3938.image priorSource: 15601386!

----SNAPSHOT----(4 December 2019 21:32:34) CuisUniversity-3938.image priorSource: 15660759!


Dictionary new
		at: '978-0439708180' put: (self createDictionaryWith:8.74  and:'title 1');
		at: '978-1338299151' put: (self createDictionaryWith:6.99  and:'title 2');
		at: '978-0439136365' put: (self createDictionaryWith:5.76  and:'title 3');
		at: '978-0439139601' put: (self createDictionaryWith:7.79  and:'title 4');
		at: '978-0439358071' put:(self createDictionaryWith:7.79  and:'title 5');
		at: '978-0439785969' put: (self createDictionaryWith:7.79  and:'title 6');
		at: '978-0545139700' put: (self createDictionaryWith:10.49  and:'title 7');
		yourself!

Dictionary new
		at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	};
	yourself);
		at: '978-1338299151' put:(Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	};
	yourself);
		yourself!

self at:'978-0439708180'!

self at:'price'!

self at:'978-0439708180'!

Dictionary new at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	};
	yourself);
	yourself!

self at:'978-0439708180'!

 (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	};
	yourself)!

Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	}!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:00:41' prior: 50820904!
createDictionaryWith:aPrice and:aTitle
	
	^ Dictionary newFromPairs:{
		'price'.aPrice.
		'title'.aTitle.
	}! !

Dictionary new at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	});
	yourself!

Dictionary new at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	});
	at: '978-0439708181' put: (Dictionary newFromPairs:{
		'price'.11.
		'title'.'title2'.
	});
	yourself!

Dictionary new at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	});
	at: '978-0439708181' put: (Dictionary newFromPairs:{
		'price'.11.
		'title'.'title2'.
	});
	yourself!

self array!

self keys !

array:= OrderedCollection new.!

dict := Dictionary new at: '978-0439708180' put: (Dictionary newFromPairs:{
		'price'.10.
		'title'.'title1'.
	});
	at: '978-0439708181' put: (Dictionary newFromPairs:{
		'price'.11.
		'title'.'title2'.
	});
	yourself!

(dict keys) do:[:key| array add:(
	Dictionary newFromPairs:{
		'isbn'.key.
		'title'.(dict at:key)at:'title'.
		'price'.(dict at:key)at:'price'.
	}
	
	)]!

array!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:11:51' prior: 50819135!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		substringsAsJson:= WebUtils jsonEncode: (result).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:12:38' prior: 50821131!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		self halt.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		substringsAsJson:= WebUtils jsonEncode: (result).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:14:34' prior: 50821220!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		self halt.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (result).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:14:37' prior: 50821310!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (result).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

WebUtils jsonEncode: (result)!

killServer value: server.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:16:41' prior: 50821397!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := Array new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (result).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

server := TusLibrosServerController listeningOn: listeningPort. !

array:= Array new.!

(dict keys) do:[:key| array add:(
	Dictionary newFromPairs:{
		'isbn'.key.
		'title'.(dict at:key)at:'title'.
		'price'.(dict at:key)at:'price'.
	}
	
	)]!

array append: 1.!

Array!

array:= OrderedCollection new.!

array isArray!

(Array new) isArray!

array:= Array braceWithNone .!

array!

(dict keys) do:[:key| array add:(
	Dictionary newFromPairs:{
		'isbn'.key.
		'title'.(dict at:key)at:'title'.
		'price'.(dict at:key)at:'price'.
	}
	
	)]!

array!

self add: 1!

array:= OrderedCollection new .!

array asString!

(dict keys) do:[:key| array add:(
	Dictionary newFromPairs:{
		'isbn'.key.
		'title'.(dict at:key)at:'title'.
		'price'.(dict at:key)at:'price'.
	}
	
	)]!

array!

array asString !

dict asArray !

array!

array asArray !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:24:17' prior: 50821489!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:26:17' prior: 50821602!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.!

----SNAPSHOT----(4 December 2019 22:26:39) CuisUniversity-3938.image priorSource: 15660852!

----SNAPSHOT----(4 December 2019 22:28:19) CuisUniversity-3938.image priorSource: 15684188!

killServer value: server.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:31:02' prior: 50821692!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId').
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity').
		
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:32:42' prior: 50821789!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId').
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity').
		
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:35:12' prior: 50821917!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId').
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity').
		
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort.!

killServer value: server.!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:40:15' prior: 50822045!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId').
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity').
		self halt.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

server := TusLibrosServerController listeningOn: listeningPort. !

systemFacade!

cartSessions!

cartSessions at: aCartId!

'1' asInteger!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:48:08' prior: 50822168!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity').
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:48:44' prior: 50822292!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asInteger.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

server!

cartSessions at:1!

cart!

items!

cartSessions at:1!

cart!

items!

'-1' asInteger!

'-1' asIntegerOrFloat !

'-1' asIntegerPoint !

'-1' asNumber !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 22:54:17' prior: 50822415!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

pepe:=Bag new.!

pepe add:'hola' withOccurrences:0.!

pepe!
!CartTest methodsFor: 'tests' stamp: 'FA 12/4/2019 23:05:49'!
test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart

	| cart |

	cart := testObjectsFactory createCart.
	
	self
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FA 12/4/2019 23:07:47' prior: 50822667!
test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 5 of: testObjectsFactory itemSellByTheStore.
	cart add: -4 of: testObjectsFactory itemSellByTheStore.
	self assert:1 equals: (cart occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 12/4/2019 23:07:52'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:07:54'!
ERROR!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:07:54'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:08:55' prior: 50816014!
add: aQuantity of: anItem
	aQuantity<0 ifTrue:[ self remove:aQuantity of:anItem].
	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:08:59'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:09:07'!
remove: aSmallInteger of: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:11:06' prior: 50822730!
remove: aQuantity of: anItem 
	anItem timesRepeat: [items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:11:08'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:11:27' prior: 50822735!
remove: aQuantity of: anItem 
	anItem timesRepeat: [:i | items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:11:28'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:11:38' prior: 50822745!
remove: aQuantity of: anItem 
	aQuantity timesRepeat: [:i | items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:11:40'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:11:52' prior: 50822717!
add: aQuantity of: anItem
	aQuantity<0 ifTrue:[ ^self remove:aQuantity of:anItem].
	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:11:54'!
FAILURE!

aQuantity!

(aQuantity)positive!

(aQuantity) not !

(aQuantity) negative!

(aQuantity) negated!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:14:30' prior: 50822755!
remove: aQuantity of: anItem 
	(aQuantity negated)  timesRepeat: [:i | items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:14:31'!
ERROR!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:14:54'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:15:49' prior: 50822782!
remove: aQuantity of: anItem 
	(aQuantity negated)  timesRepeat: [items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:15:52'!
PASSED!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:15:54'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'FA 12/4/2019 23:17:10'!
test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 5 of: testObjectsFactory itemSellByTheStore.
	cart add: -4 of: testObjectsFactory itemSellByTheStore.
	self assert:1 equals: (cart occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!CartTest methodsFor: 'tests' stamp: 'FA 12/4/2019 23:18:14' prior: 50822811!
test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 5 of: testObjectsFactory itemSellByTheStore.
	
	self
		should: [cart add: -6 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert:5 equals: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) ]! !

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:18:16'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:19:31' prior: 50822797!
remove: aQuantity of: anItem 
	((items occurrencesOf: anItem) < aQuantity ) ifTrue:[ ].
	(aQuantity negated)  timesRepeat: [items remove:anItem.].
	
	 ! !
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:19:52' prior: 50822847!
remove: aQuantity of: anItem 
	((items occurrencesOf: anItem) < aQuantity ) ifTrue:[ self signalInvalidQuantity].
	(aQuantity negated)  timesRepeat: [items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:19:54'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:19:54'!
PASSED!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:19:54'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 23:20:06'!
PASSED!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:20:08'!
FAILURE!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:20:08'!
FAILURE!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:20:36'!
FAILURE!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:20:46'!
FAILURE!

(items occurrencesOf: anItem)!

aQuantity!
!Cart methodsFor: 'adding' stamp: 'FA 12/4/2019 23:22:18' prior: 50822855!
remove: aQuantity of: anItem 
	((items occurrencesOf: anItem) + aQuantity < 0 ) ifTrue:[ self signalInvalidQuantity].
	(aQuantity negated)  timesRepeat: [items remove:anItem.].
	
	 ! !

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:22:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:22:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test04CanAddANonPositiveNumberOfItemsIfAtLeastHaveThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CartTest #test09CannotAddANonPositiveNumberOfItemsIfDoNotHaveAtLeastThatAmountOfItemsInTheCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FA 12/4/2019 23:22:26'!
PASSED!

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

server!

systemFacade !

cartSessions at:1!

cart!

items!

cartSessions at:1!

cart!

items!

----SNAPSHOT----(4 December 2019 23:27:19) CuisUniversity-3938.image priorSource: 15684281!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:29:07' prior: 50822543!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart  cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=systemFacade listCartIdentifiedAs: cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:31:03' prior: 50823188!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart  cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=systemFacade listCartIdentifiedAs: cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	booksInCart asArray.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:32:26' prior: 50823337!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart  cartId |
		cartId := (request fields at:'cartId') asInteger .
		self halt.
		booksInCart :=systemFacade listCartIdentifiedAs: cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	booksInCart asArray.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:34:15' prior: 50823489!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart booksArray cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=systemFacade listCartIdentifiedAs: cartId.
		booksArray:=booksInCart asArray.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	booksInCart asArray.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:34:20' prior: 50823642!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart booksArray cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=systemFacade listCartIdentifiedAs: cartId.
		booksArray:=booksInCart asArray.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	booksInCart asArray.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

((Dictionary new) at:10 ifAbsentPut:0)
!

a := Dictionary new
!

a at:10 put:((a at:10 ifAbsentPut:0)+1)
!

a!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:43:18' prior: 50823793!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	result asArray.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!

result asArray!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/4/2019 23:44:38' prior: 50823951!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

----SNAPSHOT----(4 December 2019 23:45:50) CuisUniversity-3938.image priorSource: 15729052!

----SNAPSHOT----(4 December 2019 23:53:47) CuisUniversity-3938.image priorSource: 15763605!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:06:33' prior: 50824108!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID asNumber .
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:06:35' prior: 50824270!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		'0'.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		'1'.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:07:48' prior: 50824424!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:13:17' prior: 50824578!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
			
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:16:04' prior: 50824734!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId |
		cartId := (request fields at:'cartId') asInteger .
		ccn := (request fields at:'ccn') .
		cced :=  (request fields at:'cced').
		cco := (request fields at:'cco').
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered:ccn  ownedBy:cco  expiringOn: cced.
		
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:17:38' prior: 50824887!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId |
		cartId := (request fields at:'cartId') asInteger .
		ccn := (request fields at:'ccn') .
		cced :=  (request fields at:'cced').
		cco := (request fields at:'cco').
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered:ccn  ownedBy:cco  expiringOn: cced.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:19:32' prior: 50825074!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId |
		cartId := (request fields at:'cartId') asInteger .
		ccn := (request fields at:'ccn') .
		cced :=  (request fields at:'cced').
		cco := (request fields at:'cco').
		self halt.
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered:ccn  ownedBy:cco  expiringOn: cced.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:23:39' prior: 50825265!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId |
		cartId := (request fields at:'cartId') asInteger .
		ccn := (request fields at:'ccn') .
		cced :=  (request fields at:'cced').
		cco := (request fields at:'cco').
		self halt.
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered:ccn  ownedBy:cco  expiringOn: cced.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

(Month month: '032020' monthIndex year:  '032020' yearNumber)
!

(Month month: '03/2020' monthIndex year:  '03/2020' yearNumber)!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:26:56' prior: 50825456!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId |
		cartId := (request fields at:'cartId') asInteger .
		ccn := (request fields at:'ccn') .
		cced :=  (request fields at:'cced').
		cco := (Month month: 03 monthIndex year:  (((Date now) year)+1) yearNumber).
		self halt.
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered:ccn  ownedBy:cco  expiringOn: cced.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:30:57' prior: 50825648!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId testObjectsFactory |
			testObjectsFactory:=StoreTestObjectsFactory new. 
		cartId := (request fields at:'cartId') asInteger .
		
		self halt.
		ticket := systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:32:06' prior: 50825840!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco ticket cartId testObjectsFactory |
			testObjectsFactory:=StoreTestObjectsFactory new. 
		cartId := (request fields at:'cartId') asInteger .
		
		self halt.
		ticket := systemFacade checkOutCartIdentifiedAs: cartId
		 withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		 ownedBy: testObjectsFactory notExpiredCreditCardOwner 
		 expiringOn: testObjectsFactory notExpiredMonthOfYear.
		self halt.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.!

server := TusLibrosServerController listeningOn: listeningPort. 
!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'FA 12/5/2019 00:36:32' prior: 50826031!
initializeWith: aPortNumber

	[
		port:= aPortNumber.
	
		webServer := WebServer new listenOn: aPortNumber.
		
		systemFacade := TusLibrosSystemFacade
			authenticatingWith: self usersAndPasswords
			acceptingItemsOf: self catalog
			registeringOn: self salesBook
			debitingThrought: self merchantProcessor
			measuringTimeWith: self clock.
			
		webServer addService: '/createCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | cartID |
		clientID := (request fields at:'clientId').
		password := (request fields at:'password').
		cartID:=systemFacade createCartFor:clientID  authenticatedWith: password.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	cartID asNumber.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			
			anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ifTrue:[
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				^self.
				].
			request send200Response: (anError messageText) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.] 
				]
			].
	
			
			webServer addService: '/catalog' action:[:request | |substringsAsJson clientID password substrings |
		
		[ | result |
		result := OrderedCollection new.
		(self catalog keys) do:[:key| result add:(
				Dictionary newFromPairs:{
					'isbn'.key.
					'title'.(self catalog at:key)at:'title'.
					'price'.(self catalog at:key)at:'price'.
				}
				)
		].
		
		substringsAsJson:= WebUtils jsonEncode: (result asArray).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
				resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				]
			].
			
			
			
			webServer addService: '/addToCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  bookIsbn bookQuantity cartId |
		cartId := (request fields at:'cartId') asInteger .
		bookIsbn := (request fields at:'bookIsbn').
		bookQuantity := (request fields at:'bookQuantity') asNumber.
		systemFacade add:bookQuantity  of:bookIsbn  toCartIdentifiedAs:cartId.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	'OK'.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
	
	
				webServer addService: '/listCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  booksInCart result cartId |
		cartId := (request fields at:'cartId') asInteger .
		booksInCart :=(systemFacade listCartIdentifiedAs: cartId) asArray.
		result:=Dictionary new.
		booksInCart do:[:isbn|
			result at:isbn put:((result at:isbn ifAbsentPut:0)+1).
			].
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	result.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
		
		webServer addService: '/checkoutCart' action:[:request | |substringsAsJson clientID password substrings |
		
		[ |  ccn cced cco  cartId testObjectsFactory |
			testObjectsFactory:=StoreTestObjectsFactory new. 
		cartId := (request fields at:'cartId') asInteger .
		
		systemFacade checkOutCartIdentifiedAs: cartId
		 withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		 ownedBy: testObjectsFactory notExpiredCreditCardOwner 
		 expiringOn: testObjectsFactory notExpiredMonthOfYear.
		substringsAsJson:= WebUtils jsonEncode: (
			Dictionary newFromPairs: {
				'code'. 		0.
				'msg'.	0.
			}
		).
		request send200Response: (substringsAsJson) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |

				substringsAsJson:= WebUtils jsonEncode: (
					Dictionary newFromPairs: {
						'code'. 		1.
						'msg'.	anError messageText.
					}
				).
				request send200Response:(substringsAsJson) contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.].
				
			
				]
			].
		
	] on: Error do: [ :anError |
		self stopListening.
		self destroy.
		
		anError pass.
	].
	
	! !

killServer value: server.
!

----SNAPSHOT----(5 December 2019 00:37:04) CuisUniversity-3938.image priorSource: 15763698!

killServer value: server.
!

server := TusLibrosServerController listeningOn: listeningPort. 
!

killServer value: server.!