

----STARTUP---- (11 November 2019 17:07:30) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


----End fileIn of /Users/asdolo/Desktop/Ingsoft1/25-TusLibros/3/TusLibros.st----!

Date now !

Date current !

Date current!

GregorianDateTime current !

GregorianDateTime now !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

Object subclass: #InnerFace
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 17:40:52'!
Object subclass: #InnerFace
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InnerFaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFaceTest category: #TusLibros stamp: 'LR 11/11/2019 17:40:58'!
TestCase subclass: #InnerFaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 17:50:10'!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	innerFace createCartFor: clientID withPassword: password.! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 17:53:28' prior: 50777982!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	self 
		should: [ innerFace createCartFor: clientID withPassword: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace invalidCredentialsErrorMessage.
			self assert: 0 equals: innerFace totalCreatedCarts ]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 17:53:35'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:00:28' prior: 50777993!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	self 
		should: [ innerFace createCartFor: clientID withPassword: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace invalidCredentialsErrorMessage. ]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:00:29'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:00:39'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:01:10' prior: 50778033!
createCartFor: aClientId withPassword: aPassword

	self error: self class invalidCredentialsErrorMessage. 
	
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:12'!
ERROR!
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:30'!
invalidCredentialsErrorMessage
	self shouldBeImplemented.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:48' prior: 50778048!
invalidCredentialsErrorMessage
	
	^ 'Invalid credentials'.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:50' prior: 50778053!
invalidCredentialsErrorMessage
	
	^ 'Invalid credentials'! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:53'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:53'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:12:14'!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace new.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: cartID1 ~= cartID2.! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:12:16'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:12:27' prior: 50778071!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace new.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:12:27'!
ERROR!

----SNAPSHOT----(11 November 2019 18:12:33) CuisUniversity-3938.image priorSource: 14319118!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:20' prior: 50778038!
createCartFor: aClientId withPassword: aPassword

	| realPassword usersToPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:42' prior: 50778118!
createCartFor: aClientId withPassword: aPassword

	| realPassword userasToPassword |
	realPassword := userasToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:16:50'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:48' prior: 50778131!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:17:15'!
initialize

	usersToPassword := Dictionary new.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:18:08'!
initializeWithUsers: aUsersToPasswordDictionary

	usersToPassword := aUsersToPasswordDictionary.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:19:42'!
defaultUsersToPasswordDictionary

	! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:04' prior: 50778173!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {'Red' . Color red . 'Blue' . Color blue . 'Green' . Color green}.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:44' prior: 50778177!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {self client1ID . self password1 . self client2ID . self password2 }.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:58'!
client1ID
	
	^ 'valid ID 1'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:05'!
client2ID
	
	^ 'valid ID 2'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:19'!
password1
	
	^ 'valid password 1'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:21'!
password2
	
	^ 'valid password 2'! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:22:03' prior: 50778093!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:22:04'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:22:25' prior: 50778207!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:22:26'!
ERROR!
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 18:22:31'!
createWithUsers: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreateWithUsers: aDictionary ! !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 18:23:08' prior: 50778250!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary ! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:23:15'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:15'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:23:50'!
test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:50'!
FAILURE!

----SNAPSHOT----(11 November 2019 18:23:56) CuisUniversity-3938.image priorSource: 14286849!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:25:13'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:25:08' prior: 50778151!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:25:43' prior: 50778163!
initialize

	usersToPassword := Dictionary new.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:25:54' prior: 50778167!
initializeWithUsers: aUsersToPasswordDictionary

	usersToPassword := aUsersToPasswordDictionary.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:26:16' prior: 50778332!
initializeWithUsers: aUsersToPasswordDictionary

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:26:22'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:26:22'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:26:22'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:28:00'!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !

!methodRemoval: InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:00'!
test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:28:03'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:03'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:03'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:37:37'!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }).!

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'c' . 'ad' }).!

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'ca' . 'a' }).!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:38:42'!
ERROR!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:38:50'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:39:03' prior: 50778425!
listCart: aCartID 
	
	^ Dictionary new.! !

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:39:05'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:05'!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: Dictionary newFromPairs: {} equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:13' prior: 50778453!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {}) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:43' prior: 50778469!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:45:45'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:45:53'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:50:17' prior: 50778506!
add: aQuantity of: anItem to: aCartID! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:50:27'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:50:27'!
FAILURE!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:54:50' prior: 50778512!
add: aQuantity of: anItem to: aCartID

	(self cartIDsToCart at: aCartID) add: anItem of: aQuantity.! !

Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:55:13'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:56:12' prior: 50778313!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: 'a valid ISBN').
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:57:48' prior: 50778545!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: (Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	^ lastCartID.

	
	! !
!Cart methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:59:49'!
items

	^ items copy.! !

pepe := Dictionary new.!

pepe!

self at: 'asdasd' ifAbsentPut: 123!

self at: 'asdasd' ifAbsentPut: 123!

self!

self at: 'asdasd' ifAbsentPut: 123!

self at: 'aaa' ifAbsentPut: 123!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 19:10:07' prior: 50778430!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:10:13'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:10:16'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:23'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:23'!
ERROR!
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:10:56' prior: 50778327!
initialize

	usersToPassword := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:04'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:04'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:08'!
FAILURE!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:08'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 19:11:24' prior: 50778588!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:26'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:26'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:11:39' prior: 50778526!
add: aQuantity of: anItem to: aCartID

	(cartIDsToCart at: aCartID) add: anItem of: aQuantity.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:40'!
ERROR!

aQuantity!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:11:59' prior: 50778715!
add: aQuantity of: anItem to: aCartID

	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:12:02'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

----SNAPSHOT----(11 November 2019 19:12:07) CuisUniversity-3938.image priorSource: 14292866!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 19:14:44'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:14:41' prior: 50778561!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:14:56' prior: 50778646!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:16:09'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.! !
!InnerFace class methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:09' prior: 50778259!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !

!methodRemoval: InnerFace #initializeWithUsers: stamp: 'LR 11/11/2019 19:16:09'!
initializeWithUsers: aUsersToPasswordDictionary

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.!
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:16:39' prior: 50778799!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:16:56'!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778357!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778231!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778485!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778399!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !

!methodRemoval: InnerFace class #createWithUsers: stamp: 'LR 11/11/2019 19:16:57'!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:17:03' prior: 50778823!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:18:57'!
createInnerFace
	
	^InnerFace createWithUsers: '' andCatalog: self defaultCatalog.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:20:44'!
defaultUsers
	
	^ Dictionary new
		at: self user1ID put: self user1Password;
		at: self user2ID put: self user2Password;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:21:23' prior: 50778925!
defaultUsers
	
	^ Dictionary new
		at: self user1ID put: self user1Password;
		at: self user2ID put: self user2Password;
		yourself! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:21:55'!
client1ID
	
	^ 'valid ID 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:01'!
client2ID
	
	^ 'valid ID 2'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:08' prior: 50778940!
client1ID
	
	^ 'valid client ID 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:12' prior: 50778944!
client2ID
	
	^ 'valid client ID 2'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:39'!
password1
	
	^ 'valid client password 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:41'!
password2
	
	^ 'valid client password 2'! !

!methodRemoval: InnerFaceTest #password1 stamp: 'LR 11/11/2019 19:23:02'!
password1
	
	^ 'valid password 1'!

!methodRemoval: InnerFaceTest #password2 stamp: 'LR 11/11/2019 19:23:04'!
password2
	
	^ 'valid password 2'!

!methodRemoval: InnerFaceTest #client1ID stamp: 'LR 11/11/2019 19:23:07'!
client1ID
	
	^ 'valid ID 1'!

!methodRemoval: InnerFaceTest #client2ID stamp: 'LR 11/11/2019 19:23:08'!
client2ID
	
	^ 'valid ID 2'!

!methodRemoval: InnerFaceTest #defaultUsersToPasswordDictionary stamp: 'LR 11/11/2019 19:23:12'!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {self client1ID . self password1 . self client2ID . self password2 }.!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:23:16'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:16'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:16'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:23:17'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:23:17'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:27'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:27'!
ERROR!

!classDefinition: #InnerFaceTest category: #TusLibros stamp: 'LR 11/11/2019 19:24:43'!
TestCase subclass: #InnerFaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFaceTest methodsFor: 'setup' stamp: 'LR 11/11/2019 19:24:41'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:24:56' prior: 50778851!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: testObjectsFactory andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:25:32' prior: 50779027!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:25:44' prior: 50779044!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	cartID2 := innerFace createCartFor: testObjectsFactory client2ID withPassword: testObjectsFactory password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:02' prior: 50778833!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	cartID2 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:09' prior: 50778888!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:34' prior: 50778869!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:27:03' prior: 50779103!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:27:14'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:27:19'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:26'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:26'!
ERROR!

aClientId!

usersToPassword!
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:28:02' prior: 50778919!
createInnerFace
	
	^InnerFace createWithUsers: self defaultUsers andCatalog: self defaultCatalog.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:28:05'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:08'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:08'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:28:32' prior: 50778933!
defaultUsers
	
	^ Dictionary new
		at: self client1ID put: self password1;
		at: self client2ID put: self password2;
		yourself! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:36'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:36'!
ERROR!

anItem!

aQuantity!

anItem!

self!
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:29:35' prior: 50778791!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog ! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:29:36' prior: 50779241!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:38'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:38'!
FAILURE!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:29:41'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:42'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:43'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:29:44'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:45'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:45'!
FAILURE!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:30:04' prior: 50779120!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'validBook' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:30:07'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

----SNAPSHOT----(11 November 2019 19:30:13) CuisUniversity-3938.image priorSource: 14307401!

----SNAPSHOT----(11 November 2019 20:54:32) CuisUniversity-3938.image priorSource: 14326385!

----QUIT----(11 November 2019 20:54:39) CuisUniversity-3938.image priorSource: 14326479!

----STARTUP---- (14 November 2019 17:20:15) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

InnerFace invalidCredentialsErrorMessage!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:28:16'!
test06CannotAddBookToANotExistantCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'.
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:29:19'!
test06CannotAddBookToANonExistentCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self 
		should: [ innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage. ]! !

!methodRemoval: InnerFaceTest #test06CannotAddBookToANotExistantCart stamp: 'LR 11/14/2019 17:29:24'!
test06CannotAddBookToANotExistantCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'.
	!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:29:27'!
ERROR!
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/14/2019 17:29:34'!
nonExistentCartErrorMessage
	self shouldBeImplemented.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/14/2019 17:29:43' prior: 50779463!
nonExistentCartErrorMessage
	
	^ 'Non existent cart'! !

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:29:46'!
FAILURE!

----SNAPSHOT----(14 November 2019 17:29:54) CuisUniversity-3938.image priorSource: 14326573!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/14/2019 17:30:57' prior: 50778726!
add: aQuantity of: anItem to: aCartID

	cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ].
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:31:06'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:31:24'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:35:28'!
test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self 
		should: [ innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage. ]! !

#(Dictionary new . 0)!

#((Dictionary new) . 0)!

'asd', 'eeee'!

'asd' . 'eeee'!

#('asd' . 'eeee')!

#('asd' 'eeee')!

#((Dictionary new) 0)!

#(Dictionary new)!

#(Dictionary new)!

(Dictionary new)@'sad'!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/TerseGuide.pck.st----!

20!

----SNAPSHOT----(14 November 2019 19:34:37) CuisUniversity-3938.image priorSource: 14330402!

----QUIT----(14 November 2019 19:34:42) CuisUniversity-3938.image priorSource: 14428731!

----STARTUP---- (18 November 2019 10:13:07) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


----SNAPSHOT----(18 November 2019 10:13:15) CuisUniversity-3938.image priorSource: 14428825!

----QUIT----(18 November 2019 10:13:19) CuisUniversity-3938.image priorSource: 14429023!