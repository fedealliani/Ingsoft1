

----STARTUP---- (11 November 2019 17:07:30) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


----End fileIn of /Users/asdolo/Desktop/Ingsoft1/25-TusLibros/3/TusLibros.st----!

Date now !

Date current !

Date current!

GregorianDateTime current !

GregorianDateTime now !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LR 11/11/2019 17:37:10'!
PASSED!

Object subclass: #InnerFace
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 17:40:52'!
Object subclass: #InnerFace
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InnerFaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFaceTest category: #TusLibros stamp: 'LR 11/11/2019 17:40:58'!
TestCase subclass: #InnerFaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 17:50:10'!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	innerFace createCartFor: clientID withPassword: password.! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 17:53:28' prior: 50777982!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	self 
		should: [ innerFace createCartFor: clientID withPassword: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace invalidCredentialsErrorMessage.
			self assert: 0 equals: innerFace totalCreatedCarts ]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 17:53:35'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:00:28' prior: 50777993!
test01CannotCreateACartWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	self 
		should: [ innerFace createCartFor: clientID withPassword: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace invalidCredentialsErrorMessage. ]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:00:29'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:00:39'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:01:10' prior: 50778033!
createCartFor: aClientId withPassword: aPassword

	self error: self class invalidCredentialsErrorMessage. 
	
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:12'!
ERROR!
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:30'!
invalidCredentialsErrorMessage
	self shouldBeImplemented.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:48' prior: 50778048!
invalidCredentialsErrorMessage
	
	^ 'Invalid credentials'.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/11/2019 18:01:50' prior: 50778053!
invalidCredentialsErrorMessage
	
	^ 'Invalid credentials'! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:53'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:01:53'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:12:14'!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace new.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: cartID1 ~= cartID2.! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:12:16'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:12:27' prior: 50778071!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace new.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:12:27'!
ERROR!

----SNAPSHOT----(11 November 2019 18:12:33) CuisUniversity-3938.image priorSource: 14319118!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:20' prior: 50778038!
createCartFor: aClientId withPassword: aPassword

	| realPassword usersToPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:42' prior: 50778118!
createCartFor: aClientId withPassword: aPassword

	| realPassword userasToPassword |
	realPassword := userasToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:16:50'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:16:48' prior: 50778131!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^ aClientId 

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:17:15'!
initialize

	usersToPassword := Dictionary new.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:18:08'!
initializeWithUsers: aUsersToPasswordDictionary

	usersToPassword := aUsersToPasswordDictionary.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:19:42'!
defaultUsersToPasswordDictionary

	! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:04' prior: 50778173!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {'Red' . Color red . 'Blue' . Color blue . 'Green' . Color green}.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:44' prior: 50778177!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {self client1ID . self password1 . self client2ID . self password2 }.! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:20:58'!
client1ID
	
	^ 'valid ID 1'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:05'!
client2ID
	
	^ 'valid ID 2'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:19'!
password1
	
	^ 'valid password 1'! !
!InnerFaceTest methodsFor: 'helpers' stamp: 'LR 11/11/2019 18:21:21'!
password2
	
	^ 'valid password 2'! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:22:03' prior: 50778093!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace client1ID password1 client2ID password2 cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	client1ID := 'valid ID 1'.
	password1 := 'valid password 1'.
	
	client2ID := 'valid ID 2'.
	password2 := 'valid password 2'.
	
	cartID1 := innerFace createCartFor: client1ID withPassword: password1.
	cartID2 := innerFace createCartFor: client2ID withPassword: password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:22:04'!
ERROR!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:22:25' prior: 50778207!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:22:26'!
ERROR!
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 18:22:31'!
createWithUsers: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreateWithUsers: aDictionary ! !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 18:23:08' prior: 50778250!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary ! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:10'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:23:15'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:15'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:23:50'!
test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:23:50'!
FAILURE!

----SNAPSHOT----(11 November 2019 18:23:56) CuisUniversity-3938.image priorSource: 14286849!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:25:13'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:25:08' prior: 50778151!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:25:43' prior: 50778163!
initialize

	usersToPassword := Dictionary new.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:25:54' prior: 50778167!
initializeWithUsers: aUsersToPasswordDictionary

	usersToPassword := aUsersToPasswordDictionary.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 18:26:16' prior: 50778332!
initializeWithUsers: aUsersToPasswordDictionary

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:26:22'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:26:22'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:26:22'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:28:00'!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !

!methodRemoval: InnerFaceTest #test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:00'!
test02CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:28:03'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:03'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:28:03'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:37:37'!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }).!

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'c' . 'ad' }).!

(Dictionary newFromPairs: {'a' . 'b' . 'c' . 'd' }) = (Dictionary newFromPairs: {'a' . 'b' . 'ca' . 'a' }).!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:38:42'!
ERROR!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:38:50'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:39:03' prior: 50778425!
listCart: aCartID 
	
	^ Dictionary new.! !

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 18:39:05'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 18:39:05'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:05'!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: Dictionary newFromPairs: {} equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:13' prior: 50778453!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {}) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 18:45:43' prior: 50778469!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:45:45'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:45:53'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:50:17' prior: 50778506!
add: aQuantity of: anItem to: aCartID! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:50:27'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 18:50:27'!
FAILURE!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:54:50' prior: 50778512!
add: aQuantity of: anItem to: aCartID

	(self cartIDsToCart at: aCartID) add: anItem of: aQuantity.! !

Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 18:55:13'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:56:12' prior: 50778313!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: 'a valid ISBN').
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 18:57:48' prior: 50778545!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: (Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	^ lastCartID.

	
	! !
!Cart methodsFor: 'accessing' stamp: 'LR 11/11/2019 18:59:49'!
items

	^ items copy.! !

pepe := Dictionary new.!

pepe!

self at: 'asdasd' ifAbsentPut: 123!

self at: 'asdasd' ifAbsentPut: 123!

self!

self at: 'asdasd' ifAbsentPut: 123!

self at: 'aaa' ifAbsentPut: 123!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 19:10:07' prior: 50778430!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:10:13'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:10:13'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:10:16'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:10:16'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:23'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:10:23'!
ERROR!
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:10:56' prior: 50778327!
initialize

	usersToPassword := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:04'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:04'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:04'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:08'!
FAILURE!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:08'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'LR 11/11/2019 19:11:24' prior: 50778588!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:11:26'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:26'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:26'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:11:39' prior: 50778526!
add: aQuantity of: anItem to: aCartID

	(cartIDsToCart at: aCartID) add: anItem of: aQuantity.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:11:40'!
ERROR!

aQuantity!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:11:59' prior: 50778715!
add: aQuantity of: anItem to: aCartID

	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:12:02'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:12:04'!
PASSED!

----SNAPSHOT----(11 November 2019 19:12:07) CuisUniversity-3938.image priorSource: 14292866!

!classDefinition: #InnerFace category: #TusLibros stamp: 'LR 11/11/2019 19:14:44'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/11/2019 19:14:41' prior: 50778561!
createCartFor: aClientId withPassword: aPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:14:56' prior: 50778646!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:16:09'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.! !
!InnerFace class methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:09' prior: 50778259!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !

!methodRemoval: InnerFace #initializeWithUsers: stamp: 'LR 11/11/2019 19:16:09'!
initializeWithUsers: aUsersToPasswordDictionary

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.!
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:16:39' prior: 50778799!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:16:56'!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) ! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778357!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client1ID withPassword: self password1.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778231!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778485!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'as yet unclassified' stamp: 'LR 11/11/2019 19:16:56' prior: 50778399!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := InnerFace createWithUsers: self defaultUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !

!methodRemoval: InnerFace class #createWithUsers: stamp: 'LR 11/11/2019 19:16:57'!
createWithUsers: aUsersToPasswordDictionary

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })) !
!InnerFace class methodsFor: 'instance creation' stamp: 'LR 11/11/2019 19:17:03' prior: 50778823!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:18:57'!
createInnerFace
	
	^InnerFace createWithUsers: '' andCatalog: self defaultCatalog.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:20:44'!
defaultUsers
	
	^ Dictionary new
		at: self user1ID put: self user1Password;
		at: self user2ID put: self user2Password;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'LR 11/11/2019 19:21:23' prior: 50778925!
defaultUsers
	
	^ Dictionary new
		at: self user1ID put: self user1Password;
		at: self user2ID put: self user2Password;
		yourself! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:21:55'!
client1ID
	
	^ 'valid ID 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:01'!
client2ID
	
	^ 'valid ID 2'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:08' prior: 50778940!
client1ID
	
	^ 'valid client ID 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:12' prior: 50778944!
client2ID
	
	^ 'valid client ID 2'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:39'!
password1
	
	^ 'valid client password 1'! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:22:41'!
password2
	
	^ 'valid client password 2'! !

!methodRemoval: InnerFaceTest #password1 stamp: 'LR 11/11/2019 19:23:02'!
password1
	
	^ 'valid password 1'!

!methodRemoval: InnerFaceTest #password2 stamp: 'LR 11/11/2019 19:23:04'!
password2
	
	^ 'valid password 2'!

!methodRemoval: InnerFaceTest #client1ID stamp: 'LR 11/11/2019 19:23:07'!
client1ID
	
	^ 'valid ID 1'!

!methodRemoval: InnerFaceTest #client2ID stamp: 'LR 11/11/2019 19:23:08'!
client2ID
	
	^ 'valid ID 2'!

!methodRemoval: InnerFaceTest #defaultUsersToPasswordDictionary stamp: 'LR 11/11/2019 19:23:12'!
defaultUsersToPasswordDictionary

	^ Dictionary newFromPairs: {self client1ID . self password1 . self client2ID . self password2 }.!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:23:16'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:16'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:16'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:23:17'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:23:17'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:27'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:23:27'!
ERROR!

!classDefinition: #InnerFaceTest category: #TusLibros stamp: 'LR 11/11/2019 19:24:43'!
TestCase subclass: #InnerFaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFaceTest methodsFor: 'setup' stamp: 'LR 11/11/2019 19:24:41'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:24:56' prior: 50778851!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := InnerFace createWithUsers: testObjectsFactory andCatalog: ((Dictionary newFromPairs: { 'a valid ISBN' . 1500 })).
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:25:32' prior: 50779027!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: self client1ID withPassword: self password1.
	cartID2 := innerFace createCartFor: self client2ID withPassword: self password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:25:44' prior: 50779044!
test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	cartID2 := innerFace createCartFor: testObjectsFactory client2ID withPassword: testObjectsFactory password2.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:02' prior: 50778833!
test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	cartID2 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.

	self assert: (cartID1 ~= cartID2).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:09' prior: 50778888!
test04ListingANewCartReturnsAnEmptyDictionary

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:26:34' prior: 50778869!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: 'a valid ISBN' to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:27:03' prior: 50779103!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'a valid ISBN' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:27:14'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:27:19'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:27:19'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:26'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:27:26'!
ERROR!

aClientId!

usersToPassword!
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:28:02' prior: 50778919!
createInnerFace
	
	^InnerFace createWithUsers: self defaultUsers andCatalog: self defaultCatalog.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:28:05'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:05'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:08'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:08'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'LR 11/11/2019 19:28:32' prior: 50778933!
defaultUsers
	
	^ Dictionary new
		at: self client1ID put: self password1;
		at: self client2ID put: self password2;
		yourself! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:28:36'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:36'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:28:36'!
ERROR!

anItem!

aQuantity!

anItem!

self!
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:29:35' prior: 50778791!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog ! !
!InnerFace methodsFor: 'initialization' stamp: 'LR 11/11/2019 19:29:36' prior: 50779241!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:29:38'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:38'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:38'!
FAILURE!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:29:41'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:42'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:29:43'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:29:44'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:45'!
FAILURE!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:29:45'!
FAILURE!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/11/2019 19:30:04' prior: 50779120!
test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'validBook' . 1 }) equals: (innerFace listCart: cartID1).! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:30:07'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/11/2019 19:30:10'!
PASSED!

----SNAPSHOT----(11 November 2019 19:30:13) CuisUniversity-3938.image priorSource: 14307401!

----SNAPSHOT----(11 November 2019 20:54:32) CuisUniversity-3938.image priorSource: 14326385!

----QUIT----(11 November 2019 20:54:39) CuisUniversity-3938.image priorSource: 14326479!

----STARTUP---- (14 November 2019 17:20:15) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:20:23'!
PASSED!

InnerFace invalidCredentialsErrorMessage!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:28:16'!
test06CannotAddBookToANotExistantCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'.
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:29:19'!
test06CannotAddBookToANonExistentCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self 
		should: [ innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage. ]! !

!methodRemoval: InnerFaceTest #test06CannotAddBookToANotExistantCart stamp: 'LR 11/14/2019 17:29:24'!
test06CannotAddBookToANotExistantCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'.
	!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:29:27'!
ERROR!
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/14/2019 17:29:34'!
nonExistentCartErrorMessage
	self shouldBeImplemented.! !
!InnerFace class methodsFor: 'error descriptions' stamp: 'LR 11/14/2019 17:29:43' prior: 50779463!
nonExistentCartErrorMessage
	
	^ 'Non existent cart'! !

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:29:46'!
FAILURE!

----SNAPSHOT----(14 November 2019 17:29:54) CuisUniversity-3938.image priorSource: 14326573!
!InnerFace methodsFor: 'actions' stamp: 'LR 11/14/2019 17:30:57' prior: 50778726!
add: aQuantity of: anItem to: aCartID

	cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ].
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:31:06'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'LR 11/14/2019 17:31:24'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'LR 11/14/2019 17:31:24'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'LR 11/14/2019 17:35:28'!
test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self 
		should: [ innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: '123123'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage. ]! !

#(Dictionary new . 0)!

#((Dictionary new) . 0)!

'asd', 'eeee'!

'asd' . 'eeee'!

#('asd' . 'eeee')!

#('asd' 'eeee')!

#((Dictionary new) 0)!

#(Dictionary new)!

#(Dictionary new)!

(Dictionary new)@'sad'!

----End fileIn of /Users/asdolo/Downloads/macos64/Packages/TerseGuide.pck.st----!

20!

----SNAPSHOT----(14 November 2019 19:34:37) CuisUniversity-3938.image priorSource: 14330402!

----QUIT----(14 November 2019 19:34:42) CuisUniversity-3938.image priorSource: 14428731!

----STARTUP---- (18 November 2019 10:13:07) as /Users/asdolo/Downloads/macos64/CuisUniversity-3938.image!


----SNAPSHOT----(18 November 2019 10:13:15) CuisUniversity-3938.image priorSource: 14428825!

----QUIT----(18 November 2019 10:13:19) CuisUniversity-3938.image priorSource: 14429023!

----STARTUP---- (18 November 2019 10:20:25) as /Users/personal/Desktop/cuis tdd /CuisUniversity-3958.image!


----End fileIn of /Users/personal/Desktop/cuis tdd /TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 10:22:45'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:22:45'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 10:31:44' prior: 50790601!
test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self assert: (Dictionary newFromPairs: {'total_amount' . 0 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:31:50'!
ERROR!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 10:32:06'!
listPurchasesOf: aString withPassword: aString2 
	self shouldBeImplemented.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 10:32:41' prior: 50791139!
listPurchasesOf: aClientID withPassword: aClientPassword 
	^Dictionary newFromPairs: {'total_amount' . 0 }.! !

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:32:47'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:32:51'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 10:34:18'!
test08CannotListPurchasesOfAClientWithInvalidCredentials

	| clientID innerFace password |
	innerFace := InnerFace new.
	
	clientID := 'an invalid ID'.
	password := 'an invalid password'.
	
	self 
		should: [ innerFace listPurchasesOf: clientID  withPassword:password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace invalidCredentialsErrorMessage. ]! !

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 10:34:20'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 10:35:29' prior: 50791145!
listPurchasesOf: aClientID withPassword: aClientPassword 
	| realPassword |
	realPassword := usersToPassword at: aClientID ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aClientPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	
	^Dictionary newFromPairs: {'total_amount' . 0 }.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:35:31'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 10:35:31'!
PASSED!
!InnerFace methodsFor: 'nil' stamp: 'FA 11/18/2019 10:38:35'!
assert: aClientId isValidWithPassword:aClientPassword

	| realPassword |
	realPassword := usersToPassword at: aClientId ifAbsent: [ self error: self class invalidCredentialsErrorMessage ].
	(realPassword = aClientPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessage ].
	! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 10:40:16' prior: 50790858!
createCartFor: aClientId withPassword: aPassword

	self assert: aClientId isValidWithPassword:aPassword.
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 10:40:31' prior: 50791210!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	self assert: aClientID isValidWithPassword:aClientPassword.
	
	^Dictionary newFromPairs: {'total_amount' . 0 }.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 10:40:35'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 10:40:35'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 10:43:45'!
test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self assert: (Dictionary newFromPairs: {'total_amount' . 0 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 10:46:41' prior: 50791319!
test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	
	self assert: (Dictionary newFromPairs: {'total_amount' . 0 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:00:52' prior: 50791334!
test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard.
	
	self assert: (Dictionary newFromPairs: {'total_amount' . 0 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:02:40' prior: 50791355!
test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard.
	
	self assert: (Dictionary newFromPairs: {'validBook' . 1 . 'total_amount' . 10 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:02:59'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:02:59'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:03:24'!
checkoutCart: aSmallInteger withCreditCard: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 11:10:56'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:10:52' prior: 50791415!
checkoutCart: aCartID withCreditCard: aCreditCard 
	checkout:=true.! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 11:11:16' prior: 50790874!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.! !

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:11:21'!
FAILURE!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:11:21'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 11:12:17' prior: 50791278!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	self assert: aClientID isValidWithPassword:aClientPassword.
	checkout ifTrue: [^ Dictionary newFromPairs: {'total_amount' . 0 }.]
	^ Dictionary newFromPairs: {'total_amount' . 0 }.
	! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 11:12:21' prior: 50791454!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	self assert: aClientID isValidWithPassword:aClientPassword.
	checkout ifTrue: [^ Dictionary newFromPairs: {'total_amount' . 0 }.].
	^ Dictionary newFromPairs: {'total_amount' . 0 }.
	! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 11:12:43' prior: 50791465!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	self assert: aClientID isValidWithPassword:aClientPassword.
	checkout ifTrue: [^ Dictionary newFromPairs: {'validBook' . 1 . 'total_amount' . 10 }.].
	^ Dictionary newFromPairs: {'total_amount' . 0 }.
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 11:12:45'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:12:45'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:14:47'!
test10CannotListCartWithAnInvalidCartID

	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:15:14' prior: 50791526!
test10CannotListCartWithAnInvalidCartID

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	self assert: Dictionary new equals: (innerFace listCart: cartID1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:16:27' prior: 50791531!
test10CannotListCartWithAnInvalidCartID

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	self 
		should: [ innerFace listCart: 'invalidCartID'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage. ]
	! !

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 11:16:43'!
FAILURE!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 11:16:43'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 11:17:11' prior: 50790889!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ].
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 11:17:13'!
PASSED!

| innerFace cartID1 cartID2 |
	innerFace := (StoreTestObjectsFactory new) createInnerFace.
	
	cartID1 := innerFace createCartFor: (StoreTestObjectsFactory new) client1ID withPassword: (StoreTestObjectsFactory new) password1.
	cartID2 := innerFace createCartFor: (StoreTestObjectsFactory new) client1ID withPassword: (StoreTestObjectsFactory new) password1.

	innerFace listCart: cartID2.!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:33:43'!
test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.

	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:46:40' prior: 50791627!
test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:51:11' prior: 50791634!
test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:30).
	self 
		should: [ innerFace .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace expiredCartErrorMessage. ]
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 11:51:53' prior: 50791645!
test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:30).
	self 
		should: [ innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1 .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace expiredCartErrorMessage. ]
	
	! !

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:51:54'!
ERROR!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:51:54'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:52:19'!
passTime: aDuration 
	self shouldBeImplemented.! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 11:52:37'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:52:35' prior: 50791690!
passTime: aDuration 
	passTime := aDuration.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:53:10' prior: 50791703!
passTime: aDuration 
	passTime := passTime + aDuration.! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 11:53:33' prior: 50791434!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.
	passTime  := Duration zero.! !

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:53:38'!
FAILURE!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:53:38'!
FAILURE!
!InnerFace class methodsFor: 'error descriptions' stamp: 'FA 11/18/2019 11:54:08'!
expiredCartErrorMessage
	
	^ 'Expired cart'! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 11:54:17'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:54:17'!
FAILURE!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 11:54:17'!
FAILURE!

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 11:56:15'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime cartIDsToLastModifyTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 11:56:13' prior: 50791268!
createCartFor: aClientId withPassword: aPassword

	self assert: aClientId isValidWithPassword:aPassword.
	
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	cartIDsToLastModifyTime at:lastCartID put: (self now).
	
	^ lastCartID.

	
	! !
!InnerFace methodsFor: 'nil' stamp: 'FA 11/18/2019 11:56:40'!
now
	^DateAndTime now + passTime .! !
!InnerFace methodsFor: 'as yet unclassified' stamp: 'FA 11/18/2019 11:58:21' prior: 50790849!
add: aQuantity of: anItem to: aCartID

	self assertCartIsNotExpired:aCartID.
	
	cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ].
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !
!InnerFace methodsFor: 'assertions' stamp: 'FA 11/18/2019 12:02:07'!
assertCartIsNotExpired: aCartID

	| lastModifyTime |
	lastModifyTime := cartIDsToLastModifyTime at: aCartID.
	(self now - lastModifyTime) < (Duration minutes: 30) ifFalse: [self error: self class expiredCartErrorMessage].! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:02:14'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:02:14'!
FAILURE!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:02:14'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:02:14'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:02:14'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:02:14'!
ERROR!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:02:19'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:21'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:21'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:33'!
ERROR!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:02:33'!
ERROR!
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:03:07' prior: 50791713!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.
	passTime  := Duration zero.
	cartIDsToLastModifyTime := Dictionary new.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:03:08'!
FAILURE!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:03:08'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:03:08'!
FAILURE!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:03:13'!
FAILURE!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:03:13'!
FAILURE!

anError messageText !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:04:23' prior: 50791811!
add: aQuantity of: anItem to: aCartID

	cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ].
	self assertCartIsNotExpired:aCartID.
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:04:29'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:04:29'!
PASSED!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:06:06'!
assertCartIDExist: aCartID

	^ cartIDsToCart at: aCartID ifAbsent: [ self error: self class nonExistentCartErrorMessage ]! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:06:06' prior: 50791964!
add: aQuantity of: anItem to: aCartID

	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:06:16'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:06:16'!
PASSED!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 12:06:49' prior: 50791560!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	self assertCartIDExist: aCartID.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:07:09'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:07:09'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:09:10'!
test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:30).
	self 
		should: [ innerFace listCart: cartID1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace expiredCartErrorMessage. ]
	
	! !

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:09:14'!
FAILURE!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:09:14'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 12:09:56' prior: 50792082!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:09:59'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:09:59'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:10:51'!
test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:30).
	self 
		should: [ innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace expiredCartErrorMessage. ]
	
	! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:11:11' prior: 50791429!
checkoutCart: aCartID withCreditCard: aCreditCard 
	self assertCartIsNotExpired:aCartID.
	checkout:=true.
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:11:13'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:11:13'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:14:10'!
test14AddToCartResetExpirationTimeOfCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace passTime: (Duration minutes:30).
	self 
		should: [ innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace expiredCartErrorMessage. ]
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:15:21' prior: 50792308!
test14AddToCartResetExpirationTimeOfCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:29).
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	innerFace passTime: (Duration minutes:29).

	
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:15:48' prior: 50792328!
test14AddToCartResetExpirationTimeOfCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:29).
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	innerFace passTime: (Duration minutes:29).
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: (Dictionary newFromPairs: {'validBook' . 2 }) equals: (innerFace listCart: cartID1).
	
	
	! !

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:15:49'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:16:32' prior: 50792027!
add: aQuantity of: anItem to: aCartID

	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	self updateLastModifyTime:aCartID.
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:16:49' prior: 50792368!
add: aQuantity of: anItem to: aCartID

	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.
	self updateLastModifyTime:aCartID.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:17:31'!
updateLastModifyTime: aCartID 
	cartIDsToLastModifyTime at:aCartID put:(self now).! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:18:31'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:18:31'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:20:25'!
test15ListCartResetExpirationTimeOfCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace passTime: (Duration minutes:29).
	innerFace listCart: cartID1.
	innerFace passTime: (Duration minutes:29).
	
	self assert: (Dictionary new) equals: (innerFace listCart: cartID1).
	
	
	! !

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:20:27'!
ERROR!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 12:20:56' prior: 50792166!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	self updateLastModifyTime:aCartID.
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:20:58'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:23:38'!
test16CheckoutAValidCartReturnASalePrice

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	
	self assert: (Dictionary new) equals: (innerFace listCart: cartID1).
	
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:24:36' prior: 50792543!
test16CheckoutAValidCartReturnASalePrice

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30*peso equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	! !

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:24:38'!
FAILURE!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:24:38'!
FAILURE!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:27:10' prior: 50792248!
checkoutCart: aCartID withCreditCard: aCreditCard 
	self assertCartIsNotExpired:aCartID.
	checkout:=true.
	^(cartIDsToCart at:aCartID) total.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:27:21'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:27:21'!
FAILURE!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:27:21'!
FAILURE!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:28:40'!
test16CheckoutAValidCartReturnASale

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30*peso equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	! !

!methodRemoval: InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:28:40'!
test16CheckoutAValidCartReturnASalePrice

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30*peso equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:28:58' prior: 50792654!
test16CheckoutAValidCartReturnASale

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30*peso equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard) total.
	
	
	! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 12:33:01'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime cartIDsToLastModifyTime cartIDsToClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 12:33:05'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime cartIDsToLastModifyTime cartIDsToClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:32:55' prior: 50792579!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsNotExpired:aCartID.
	checkout:=true.
	cart:=cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	^ cashier checkOut.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:33:13' prior: 50792724!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsNotExpired:aCartID.
	checkout:=true.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	^ cashier checkOut.! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:33:25' prior: 50791897!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.
	passTime  := Duration zero.
	cartIDsToLastModifyTime := Dictionary new.
	cartIDsToClientID := Dictionary new.! !

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:37:36'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:37:36'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 12:38:34' prior: 50791794!
createCartFor: aClientId withPassword: aPassword

	self assert: aClientId isValidWithPassword:aPassword.
	
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	cartIDsToClientID at:lastCartID put:aClientId .
	cartIDsToLastModifyTime at:lastCartID put: (self now).
	
	^ lastCartID.

	
	! !

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:38:40'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:38:53'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:38:53'!
ERROR!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 12:40:31'!
salesBook: aString 
	self shouldBeImplemented.! !

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 12:41:37'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime cartIDsToLastModifyTime cartIDsToClientID merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 12:41:35' prior: 50792795!
salesBook: aClientID 
	^salesBook at:aClientID  ifAbsentPut:[OrderedCollection new].! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:41:54' prior: 50792754!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.
	passTime  := Duration zero.
	cartIDsToLastModifyTime := Dictionary new.
	cartIDsToClientID := Dictionary new.
	salesBook := Dictionary new.! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:44:22'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook  

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.! !
!InnerFace class methodsFor: 'as yet unclassified' stamp: 'FA 11/18/2019 12:44:22' prior: 50790916!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: nil.! !

!methodRemoval: InnerFace #initializeWithUsers:andCatalog: stamp: 'FA 11/18/2019 12:44:22'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.!
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:45:25'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor   

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.! !
!InnerFace class methodsFor: 'as yet unclassified' stamp: 'FA 11/18/2019 12:45:25' prior: 50792837!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: nil andMerchantProcessor: nil.! !

!methodRemoval: InnerFace #initializeWithUsers:andCatalog:andSalesBook: stamp: 'FA 11/18/2019 12:45:25'!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook  

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.!
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:46:00' prior: 50792853!
initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor   

	self initialize.
	usersToPassword := aUsersToPasswordDictionary.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor .! !
!InnerFace class methodsFor: 'instance creation' stamp: 'FA 11/18/2019 12:47:07'!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: InnerFace class #createWithUsers:andCatalog: stamp: 'FA 11/18/2019 12:47:13'!
createWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog 

	^self new initializeWithUsers: aUsersToPasswordDictionary andCatalog: aCatalog andSalesBook: nil andMerchantProcessor: nil.!
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'FA 11/18/2019 12:49:01' prior: 50790989!
createInnerFace
	
	^InnerFace createWithUsers: self defaultUsers andCatalog: self defaultCatalog andSalesBook: (Dictionary new) andMerchantProcessor:nil.! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'FA 11/18/2019 12:50:47' prior: 50792915!
createInnerFace
	
	^InnerFace createWithUsers: self defaultUsers andCatalog: self defaultCatalog andSalesBook: (Dictionary new) andMerchantProcessor:( CashierTest new).! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:50:50'!
ERROR!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:50:50'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:50:50'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:50:56'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:50:56'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:51:25'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:51:25'!
ERROR!

!classDefinition: #InnerFaceTest category: #TusLibros stamp: 'FA 11/18/2019 12:52:39'!
TestCase subclass: #InnerFaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFaceTest methodsFor: 'setup' stamp: 'FA 11/18/2019 12:52:33' prior: 50790616!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:52:47'!
ERROR!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:52:47'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:52:47'!
ERROR!
!InnerFaceTest methodsFor: 'setup' stamp: 'FA 11/18/2019 12:53:10'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!StoreTestObjectsFactory methodsFor: 'innerface' stamp: 'FA 11/18/2019 12:53:55' prior: 50792923!
createInnerFace
	
	^InnerFace createWithUsers: self defaultUsers andCatalog: self defaultCatalog andSalesBook: (Dictionary new) andMerchantProcessor:self.! !

!methodRemoval: InnerFaceTest #debit:from: stamp: 'FA 11/18/2019 12:54:11'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'FA 11/18/2019 12:54:26'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'FA 11/18/2019 12:54:20'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!InnerFaceTest methodsFor: 'setup' stamp: 'FA 11/18/2019 12:54:36' prior: 50793029!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FA 11/18/2019 12:54:46' prior: 50791037!
initialize

	today := DateAndTime now.
	debitBehavior := [ :anAmount :aCreditCard | ].! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:54:47'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:54:47'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:54:47'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:54:52'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:54:52'!
ERROR!

(innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard)!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:55:20' prior: 50792687!
test16CheckoutAValidCartReturnASale

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30 equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	! !

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:55:23'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:55:24'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:55:27'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:55:27'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:56:11'!
test16CheckoutAValidCartReturnASalePrice

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30 equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	! !

!methodRemoval: InnerFaceTest #test16CheckoutAValidCartReturnASale stamp: 'FA 11/18/2019 12:56:11'!
test16CheckoutAValidCartReturnASale

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30 equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 12:56:14'!
PASSED!

----SNAPSHOT----(18 November 2019 12:56:21) CuisUniversity-3958.image priorSource: 14675071!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:57:01'!
test16CannotCheckoutWithExpiredCreditCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:57:10'!
test17CannotCheckoutWithExpiredCreditCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	
	
	! !

!methodRemoval: InnerFaceTest #test16CannotCheckoutWithExpiredCreditCart stamp: 'FA 11/18/2019 12:57:10'!
test16CannotCheckoutWithExpiredCreditCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	
	
	!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 12:58:12' prior: 50793481!
test17CannotCheckoutWithExpiredCreditCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self 
		should: [ innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory expiredCreditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage. ]
	
	! !

!testRun: #InnerFaceTest #test17CannotCheckoutWithExpiredCreditCart stamp: 'FA 11/18/2019 12:58:15'!
PASSED!

!methodRemoval: InnerFaceTest #test17CannotCheckoutWithExpiredCreditCart stamp: 'FA 11/18/2019 12:58:36'!
test17CannotCheckoutWithExpiredCreditCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self 
		should: [ innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory expiredCreditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage. ]
	
	!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 13:01:36'!
test17CannotCheckoutAnInvalidCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	self assert: 30 equals: (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 13:02:40' prior: 50793553!
test17CannotCheckoutAnInvalidCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	self 
		should: [ (innerFace checkoutCart: 'an invalid cart id' withCreditCard: testObjectsFactory notExpiredCreditCard).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage . ]
		
	
	! !

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:02:46'!
FAILURE!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:02:46'!
FAILURE!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:03:12' prior: 50792739!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	checkout:=true.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	^ cashier checkOut.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 13:03:14'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:03:14'!
PASSED!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:03:59'!
assertCartIsValid: aCartID

	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:03:59' prior: 50793591!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsValid: aCartID.
	checkout:=true.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	^ cashier checkOut.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:04:10' prior: 50792377!
add: aQuantity of: anItem to: aCartID

	self assertCartIsValid: aCartID.
	
	(cartIDsToCart at: aCartID) add: aQuantity of: anItem.
	self updateLastModifyTime:aCartID.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 13:04:29' prior: 50792469!
listCart: aCartID 
	
	| cartSummary |
	cartSummary := Dictionary new.
	
	self assertCartIsValid: aCartID.
	
	(cartIDsToCart at: aCartID) items do: [ :anISBN |
		cartSummary at: anISBN put: (cartSummary at: anISBN ifAbsentPut: 0) + 1.
	].
	self updateLastModifyTime:aCartID.
	
	^cartSummary.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 13:04:32'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:04:32'!
PASSED!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:04:58' prior: 50793680!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsValid: aCartID.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	^ cashier checkOut.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:05:00'!
FAILURE!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:05:00'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:05:01'!
FAILURE!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 13:06:28' prior: 50791476!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	self assert: aClientID isValidWithPassword:aClientPassword.
	self halt.
	checkout ifTrue: [^ Dictionary newFromPairs: {'validBook' . 1 . 'total_amount' . 10 }.].
	^ Dictionary newFromPairs: {'total_amount' . 0 }.
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 13:06:30'!
PASSED!

self!

salesBook at:'valid client ID 1'!

self at:1!

self!

self!

!classDefinition: #InnerFace category: #TusLibros stamp: 'FA 11/18/2019 13:12:44'!
Object subclass: #InnerFace
	instanceVariableNames: 'usersToPassword cartIDsToCart lastCartID catalog checkout passTime cartIDsToLastModifyTime cartIDsToClientID merchantProcessor salesBook clientIDsToPurchasedCartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:12:39' prior: 50793783!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID purchasesCartIDs |
	self assertCartIsValid: aCartID.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	purchasesCartIDs:= clientIDsToPurchasedCartIDs at:clientID ifAbsentPut:[OrderedCollection new.].
	purchasesCartIDs add :aCartID .
	clientIDsToPurchasedCartIDs at:clientID put:purchasesCartIDs.
	
	^ cashier checkOut.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:13:01' prior: 50793953!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsValid: aCartID.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	
	
	^ cashier checkOut.! !
!InnerFace methodsFor: 'nil' stamp: 'FA 11/18/2019 13:13:45'!
registerPurchaseCartID: aCartID from:aClientID 
	| purchasesCartIDs |
	purchasesCartIDs:= clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	purchasesCartIDs add :aCartID .
	clientIDsToPurchasedCartIDs at:aClientID put:purchasesCartIDs.! !
!InnerFace methodsFor: 'initialization' stamp: 'FA 11/18/2019 13:14:15' prior: 50792816!
initialize

	usersToPassword := Dictionary new.
	catalog := Dictionary new.
	cartIDsToCart := Dictionary new.
	lastCartID := 0.
	checkout:=false.
	passTime  := Duration zero.
	cartIDsToLastModifyTime := Dictionary new.
	cartIDsToClientID := Dictionary new.
	salesBook := Dictionary new.
	clientIDsToPurchasedCartIDs := Dictionary new.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:14:35' prior: 50793974!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	self assertCartIsValid: aCartID.
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:(self now)  registeringOn: (self salesBook:clientID).
	
	self registerPurchaseCartID: aCartID from: clientID.
	
	^ cashier checkOut.! !

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:15:02'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 13:15:02'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 13:15:24' prior: 50793988!
registerPurchaseCartID: aCartID from:aClientID 
	| purchasesCartIDs |
	purchasesCartIDs:= clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	purchasesCartIDs add: aCartID .
	clientIDsToPurchasedCartIDs at:aClientID put:purchasesCartIDs.! !

----SNAPSHOT----(18 November 2019 13:16:17) CuisUniversity-3958.image priorSource: 14778084!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:10:08'!
PASSED!

self!

self!

clientIDsToPurchasedCartIDs at: 'valid client ID 1'!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:19:48' prior: 50793871!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	| cartIDsList res total |
	self assert: aClientID isValidWithPassword:aClientPassword.
	self halt.
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID.
	total := 0.
	res := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= res at:item ifAbsentPut:[0.].
			 res at:item put:(amountOfItem +1).
			].
		].
	res at:'total_amount' put:[total].
	^res.
	! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:20:09' prior: 50794116!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	| cartIDsList res total |
	self assert: aClientID isValidWithPassword:aClientPassword.
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID.
	total := 0.
	res := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= res at:item ifAbsentPut:[0.].
			 res at:item put:(amountOfItem +1).
			].
		].
	res at:'total_amount' put:[total].
	^res.
	! !

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:20:10'!
FAILURE!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:20:12'!
FAILURE!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:20:29'!
FAILURE!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:20:29'!
FAILURE!

innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:21:34' prior: 50794137!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	| cartIDsList res total |
	self assert: aClientID isValidWithPassword:aClientPassword.
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID.
	total := 0.
	res := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= res at:item ifAbsentPut:[0.].
			 res at:item put:(amountOfItem +1).
			].
		].
	res at:'total_amount' put:total.
	^res.
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:21:36'!
ERROR!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:21:36'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:21:36'!
ERROR!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:21:42'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:21:46'!
ERROR!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:21:46'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:21:46'!
ERROR!

clientIDsToPurchasedCartIDs!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:23:13' prior: 50794186!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	| cartIDsList res total |
	self assert: aClientID isValidWithPassword:aClientPassword.
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	total := 0.
	res := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= res at:item ifAbsentPut:[0.].
			 res at:item put:(amountOfItem +1).
			].
		].
	res at:'total_amount' put:total.
	^res.
	! !

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:23:15'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:23:17'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:23:17'!
PASSED!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:24:41' prior: 50794359!
listPurchasesOf: aClientID withPassword: aClientPassword 
	
	| res |
	self assert: aClientID isValidWithPassword:aClientPassword.
	res := self getPurchasesOf:aClientID.
	^res.
	! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:25:09'!
getPurchasesOf: aClientID
	
	| cartIDsList res total |
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	total := 0.
	res := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= res at:item ifAbsentPut:[0.].
			 res at:item put:(amountOfItem +1).
			].
		].
	res at:'total_amount' put:total.
	^res.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:25:20'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:25:20'!
PASSED!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:25:43' prior: 50794453!
listPurchasesOf: aClientID withPassword: aClientPassword 

	self assert: aClientID isValidWithPassword:aClientPassword.
	^self getPurchasesOf:aClientID.

	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:25:45'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:25:45'!
PASSED!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:28:54' prior: 50794014!
checkoutCart: aCartID withCreditCard: aCreditCard 
	| cart cashier clientID |
	
	self assertCartIsValid: aCartID.
	
	cart := cartIDsToCart at:aCartID.
	clientID := cartIDsToClientID at:aCartID .
	cashier := Cashier toCheckout: cart charging:aCreditCard  throught:merchantProcessor on:self now  registeringOn: (self salesBook:clientID).
	
	self registerPurchaseCartID: aCartID from: clientID.
	
	^ cashier checkOut.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:28:56'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:28:56'!
PASSED!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:30:20' prior: 50792772!
createCartFor: aClientId withPassword: aPassword

	self assert: aClientId isValidWithPassword:aPassword.
	
	lastCartID := lastCartID + 1.
	
	cartIDsToCart at: lastCartID put: (Cart acceptingItemsOf: catalog).
	
	cartIDsToClientID at:lastCartID put:aClientId .
	
	self updateLastModifyTime: lastCartID.
	
	^ lastCartID.

	
	! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:30:22'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:30:22'!
PASSED!
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:30:56' prior: 50794461!
getPurchasesOf: aClientID
	
	| cartIDsList purchases total |
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	total := 0.
	purchases := Dictionary new.
	cartIDsList do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= purchases at:item ifAbsentPut:[0.].
			 purchases at:item put:(amountOfItem +1).
			].
		].
	purchases at:'total_amount' put:total.
	^purchases.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:35:52' prior: 50794788!
getPurchasesOf: aClientID
	
	| cartIDsList purchases total |
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	total := 0.
	purchases := self getPurchasesFromCartIDs:cartIDsList.
	^purchases.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:36:02' prior: 50794808!
getPurchasesOf: aClientID
	
	| cartIDsList purchases |
	cartIDsList := clientIDsToPurchasedCartIDs at:aClientID ifAbsentPut:[OrderedCollection new.].
	purchases := self getPurchasesFromCartIDs:cartIDsList.
	^purchases.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:36:53'!
getPurchasesFromCartIDs: aListOfCartIDs
	| purchases total |
	purchases := Dictionary new.
	aListOfCartIDs do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= purchases at:item ifAbsentPut:[0.].
			 purchases at:item put:(amountOfItem +1).
			].
		].
	purchases at:'total_amount' put:total.
	^purchases.! !
!InnerFace methodsFor: 'accessing' stamp: 'FA 11/18/2019 14:37:03' prior: 50794829!
getPurchasesFromCartIDs: aListOfCartIDs
	| purchases total |
	total := 0.
	purchases := Dictionary new.
	aListOfCartIDs do: [
		:aCartID | | cart | 
		cart := cartIDsToCart at:aCartID. 
		total := total + cart total.
		(cart items) do: [
			:item | | amountOfItem |
			 amountOfItem:= purchases at:item ifAbsentPut:[0.].
			 purchases at:item put:(amountOfItem +1).
			].
		].
	purchases at:'total_amount' put:total.
	^purchases.! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:37:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:37:19'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:37:19'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 14:43:22'!
test18CannotCheckoutAnAlreadyCheckoutedCart

	| innerFace |
	
	innerFace := testObjectsFactory createInnerFace.
	
	(innerFace checkoutCart: 'an invalid cart id' withCreditCard: testObjectsFactory notExpiredCreditCard).
	self 
		should: [ (innerFace checkoutCart: 'an invalid cart id' withCreditCard: testObjectsFactory notExpiredCreditCard).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage . ]
		
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 14:43:39' prior: 50795042!
test18CannotCheckoutAnAlreadyCheckoutedCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	(innerFace checkoutCart: 'an invalid cart id' withCreditCard: testObjectsFactory notExpiredCreditCard).
	self 
		should: [ (innerFace checkoutCart: 'an invalid cart id' withCreditCard: testObjectsFactory notExpiredCreditCard).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace nonExistentCartErrorMessage . ]
		
	
	! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 14:45:23' prior: 50795061!
test18CannotCheckoutAnAlreadyCheckoutedCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	(innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	self 
		should: [ (innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace cartAlreadyCheckoutedErrorMessage . ]
		
	
	! !

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:45:26'!
FAILURE!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:45:26'!
FAILURE!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:46:19' prior: 50793674!
assertCartIsValid: aCartID

	self assertCartIDExist: aCartID.
	self assertCartIsNotExpired:aCartID.
	self assertCartIsNotCheckouted:aCartID.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:46:43'!
assertCartIsNotCheckouted: aCartID
	| clientID |
	clientID := cartIDsToClientID at:aCartID .! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:47:51' prior: 50795124!
assertCartIsNotCheckouted: aCartID
	| clientID |
	clientID := cartIDsToClientID at:aCartID.
	clientIDsToPurchasedCartIDs at:clientID.! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:50:21' prior: 50795130!
assertCartIsNotCheckouted: aCartID
	| clientID cartIDs |
	clientID := cartIDsToClientID at:aCartID.
	cartIDs := clientIDsToPurchasedCartIDs at:clientID.
	(cartIDs includes: aCartID) ifTrue:[self error: self class ].! !
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:50:40' prior: 50795137!
assertCartIsNotCheckouted: aCartID
	| clientID cartIDs |
	clientID := cartIDsToClientID at:aCartID.
	cartIDs := clientIDsToPurchasedCartIDs at:clientID.
	(cartIDs includes: aCartID) ifTrue:[self error: self class cartAlreadyCheckoutedErrorMessage].! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:50:46'!
PASSED!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:50:46'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:51:05'!
ERROR!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:51:05'!
ERROR!
!InnerFace methodsFor: 'actions' stamp: 'FA 11/18/2019 14:51:57' prior: 50795147!
assertCartIsNotCheckouted: aCartID
	| clientID cartIDs |
	clientID := cartIDsToClientID at:aCartID.
	cartIDs := clientIDsToPurchasedCartIDs at:clientID ifAbsentPut:[OrderedCollection new.].
	(cartIDs includes: aCartID) ifTrue:[self error: self class cartAlreadyCheckoutedErrorMessage].! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:52:02'!
PASSED!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:52:02'!
ERROR!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:52:02'!
ERROR!
!InnerFace class methodsFor: 'errors description' stamp: 'FA 11/18/2019 14:52:21'!
cartAlreadyCheckoutedErrorMessage
	self shouldBeImplemented.! !
!InnerFace class methodsFor: 'errors description' stamp: 'FA 11/18/2019 14:52:37' prior: 50795323!
cartAlreadyCheckoutedErrorMessage
	^'Cart already checkouted'.! !

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:52:39'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:52:41'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 14:56:50'!
test19CannotAddAnItemToAnAlreadyCheckoutedCart

	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	(innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	self 
		should: [ innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace cartAlreadyCheckoutedErrorMessage . ]
		
	
	! !

!testRun: #InnerFaceTest #test19CannotAddAnItemToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!

!testRun: #InnerFaceTest #test19CannotAddAnItemToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:56:51'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 14:58:17'!
test20CannotListCartToAnAlreadyCheckoutedCart
	"Este test paso de una, pero lo pusimos para que vean que contemplamos el caso."
	| innerFace cartID1 |
	
	innerFace := testObjectsFactory createInnerFace.
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	innerFace add: 3 of: testObjectsFactory itemSellByTheStore to: cartID1.
	(innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard).
	self 
		should: [ innerFace listCart: cartID1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InnerFace cartAlreadyCheckoutedErrorMessage . ]
		
	
	! !

!testRun: #InnerFaceTest #test19CannotAddAnItemToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:58:20'!
PASSED!

!testRun: #InnerFaceTest #test20CannotListCartToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 14:58:23'!
PASSED!
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 15:03:56'!
test21ListingPurchasesOfAClientWithTwoPurchasesReturnsADictionaryContainingQuantityForEveryBookInThePurchasesAndTotalAmountPaidForUser
"Este test paso de una, pero lo pusimos para que vean que contemplamos el caso."
	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard.

	cartID2 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 2 of: testObjectsFactory itemSellByTheStore to: cartID2.
	
	innerFace add: 10 of: testObjectsFactory anotherItemSellByTheStore to: cartID2.
	
	innerFace checkoutCart: cartID2 withCreditCard: testObjectsFactory notExpiredCreditCard.
		
	self assert: (Dictionary newFromPairs: {'validBook' . 3 . 'anotherValidBook' . 10. 'total_amount' . 80 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !
!InnerFaceTest methodsFor: 'tests' stamp: 'FA 11/18/2019 15:04:07' prior: 50795541!
test21ListingPurchasesOfAClientWithTwoPurchasesReturnsADictionaryContainingQuantityForEveryBookInThePurchasesAndTotalAmountPaidForUser

	| innerFace cartID1 cartID2 |
	
	innerFace := testObjectsFactory createInnerFace.
	
	cartID1 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 1 of: testObjectsFactory itemSellByTheStore to: cartID1.
	
	innerFace checkoutCart: cartID1 withCreditCard: testObjectsFactory notExpiredCreditCard.

	cartID2 := innerFace createCartFor: testObjectsFactory client1ID withPassword: testObjectsFactory password1.
	
	innerFace add: 2 of: testObjectsFactory itemSellByTheStore to: cartID2.
	
	innerFace add: 10 of: testObjectsFactory anotherItemSellByTheStore to: cartID2.
	
	innerFace checkoutCart: cartID2 withCreditCard: testObjectsFactory notExpiredCreditCard.
		
	self assert: (Dictionary newFromPairs: {'validBook' . 3 . 'anotherValidBook' . 10. 'total_amount' . 80 }) equals: (innerFace listPurchasesOf: testObjectsFactory client1ID withPassword: testObjectsFactory password1).! !

!testRun: #InnerFaceTest #test21ListingPurchasesOfAClientWithTwoPurchasesReturnsADictionaryContainingQuantityForEveryBookInThePurchasesAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 15:04:10'!
ERROR!

!testRun: #InnerFaceTest #test21ListingPurchasesOfAClientWithTwoPurchasesReturnsADictionaryContainingQuantityForEveryBookInThePurchasesAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 15:04:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'catalog' stamp: 'FA 11/18/2019 15:04:33'!
anotherItemSellByTheStore
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 11/18/2019 15:05:21' prior: 50795629!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'FA 11/18/2019 15:05:29'!
anotherItemSellByTheStorePrice
	
	^5! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'FA 11/18/2019 15:06:25' prior: 50791016!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!testRun: #InnerFaceTest #test01CannotCreateACartWithInvalidCredentials stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test02CreatingTwoCartsWithTwoValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test03CreatingTwoCartsWithOneValidUsersReturnsDifferentCartIDs stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test04ListingANewCartReturnsAnEmptyDictionary stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test05ListingACartWithOneBookAddedReturnsADictionaryWithTheISBNOfThatBookAndAnAmmountOfOne stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test06CannotAddBookToANonExistentCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test07ListingPurchasesOfAClientWithoutAnyPurchaseReturnsAnEmptyDictionaryAndZeroAsTotalAmount stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test08CannotListPurchasesOfAClientWithInvalidCredentials stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test09ListingPurchasesOfAClientWithOnePurchaseReturnsADictionaryContainingQuantityForEveryBookInThePurchaseAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test10CannotListCartWithAnInvalidCartID stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test11CannotAddBooksAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test12CannotListCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test13CannotCheckoutCartAfter30MinutesWithoutAnyActionOnTheCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test14AddToCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test15ListCartResetExpirationTimeOfCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test16CheckoutAValidCartReturnASalePrice stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test17CannotCheckoutAnInvalidCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test18CannotCheckoutAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test19CannotAddAnItemToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test20CannotListCartToAnAlreadyCheckoutedCart stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

!testRun: #InnerFaceTest #test21ListingPurchasesOfAClientWithTwoPurchasesReturnsADictionaryContainingQuantityForEveryBookInThePurchasesAndTotalAmountPaidForUser stamp: 'FA 11/18/2019 15:06:27'!
PASSED!

----SNAPSHOT----(18 November 2019 15:08:02) CuisUniversity-3958.image priorSource: 14796908!